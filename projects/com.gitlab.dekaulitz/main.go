/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * API version: 1.0.3
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package main

import (
	"log"
	"net/http"

	// WARNING!
	// Change this to a fully-qualified import path
	// once you place this file into your project.
	// For example,
	//
	//    sw "github.com/myname/myrepo/src/controllers"
	//
	sw "com.gitlab.dekaulitz/src/controllers"
)

func main() {
		fmt.Println("service listen on: ", config.Host.Host+":"+config.Host.Port)
    	engine := gin.Default()
    	env := os.Getenv("GO_ENV")
    	if env != "production" {
    		engine.StaticFile("/swagger.json", "docs/swagger.json")
    	}
    	sw.GetRouters(engine)
    	srv := &http.Server{
    		Addr:    config.Host.Host + ":" + config.Host.Port,
    		Handler: engine,
    		//WriteTimeout: time.Second * 15,
    		//ReadTimeout:  time.Second * 15,
    		//IdleTimeout:  time.Second * 60,
    	}
    	go func() {
    		// service connections
    		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
    			log.Fatalf("listen: %s\n", err)
    		}

    	}()

    	quit := make(chan os.Signal, 1)
    	// kill (no param) default send syscanll.SIGTERM
    	// kill -2 is syscall.SIGINT
    	// kill -9 is syscall. SIGKILL but can"t be catch, so don't need add it
    	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
    	<-quit
    	log.Println("Shutdown Server ...")

    	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
    	defer cancel()
    	if err := srv.Shutdown(ctx); err != nil {
    		log.Fatal("Server Shutdown: ", err)
    	}

    	log.Println("Server exiting")
}
