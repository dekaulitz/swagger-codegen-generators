/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * API version: 1.0.3
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package controllers

import (
	"net/http"
    "github.com/gin-gonic/gin"
    "com.gitlab.dekaulitz/src/vmodels"
)
/**
 * Add a new pet to the store
 * 
 */
func AddPet(c *gin.Context) {
    var body vmodels.Pet
    jsonFail := c.BindJSON(&body)
    if jsonFail != nil {
        panic(jsonFail)
    }
    c.Writer.WriteHeader(http.StatusOK)
    return
}
/**
 * Deletes a pet
 * 
 */
func DeletePet(c *gin.Context) {
    var apiKey string=c.Request.Header.Get("api_key")
    var petId int64=c.Param("petId")
    c.Writer.WriteHeader(http.StatusOK)
    return
}
/**
 * Finds Pets by status
 * 
 */
func FindPetsByStatus(c *gin.Context) {
    var status []string=c.Query("status")
    c.Writer.Header().Set("Content-Type","application/json")
    c.Writer.Header().Set("Content-Type","application/xml")
    c.Writer.WriteHeader(http.StatusOK)
    var responseBody []Pet
    res,_:=json.Marshal(responseBody)
    c.Writer.Write(res)
    return
}
/**
 * Finds Pets by tags
 * 
 */
func FindPetsByTags(c *gin.Context) {
    var tags []string=c.Query("tags")
    c.Writer.Header().Set("Content-Type","application/json")
    c.Writer.Header().Set("Content-Type","application/xml")
    c.Writer.WriteHeader(http.StatusOK)
    var responseBody []Pet
    res,_:=json.Marshal(responseBody)
    c.Writer.Write(res)
    return
}
/**
 * Find pet by ID
 * 
 */
func GetPetById(c *gin.Context) {
    var petId int64=c.Param("petId")
    c.Writer.Header().Set("Content-Type","application/json")
    c.Writer.Header().Set("Content-Type","application/xml")
    c.Writer.WriteHeader(http.StatusOK)
    var responseBody Pet
    res,_:=json.Marshal(responseBody)
    c.Writer.Write(res)
    return
}
/**
 * Update an existing pet
 * 
 */
func UpdatePet(c *gin.Context) {
    var body vmodels.Pet
    jsonFail := c.BindJSON(&body)
    if jsonFail != nil {
        panic(jsonFail)
    }
    c.Writer.WriteHeader(http.StatusOK)
    return
}
/**
 * Updates a pet in the store with form data
 * 
 */
func UpdatePetWithForm(c *gin.Context) {
    var petId int64=c.Param("petId")
    c.Writer.WriteHeader(http.StatusOK)
    return
}
/**
 * uploads an image
 * 
 */
func UploadFile(c *gin.Context) {
    var petId int64=c.Param("petId")
    c.Writer.Header().Set("Content-Type","application/json")
    c.Writer.WriteHeader(http.StatusOK)
    var responseBody ApiResponse
    res,_:=json.Marshal(responseBody)
    c.Writer.Write(res)
    return
}
