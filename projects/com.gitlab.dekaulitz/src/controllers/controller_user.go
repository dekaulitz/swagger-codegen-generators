/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * API version: 1.0.3
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package controllers

import (
	"net/http"
    "github.com/gin-gonic/gin"
    "com.gitlab.dekaulitz/src/vmodels"
)
/**
 * Create user
 * 
 */
func CreateUser(c *gin.Context) {
    var body vmodels.User
    jsonFail := c.BindJSON(&body)
    if jsonFail != nil {
        panic(jsonFail)
    }
    c.Writer.WriteHeader(http.StatusOK)
    return
}
/**
 * Creates list of users with given input array
 * 
 */
func CreateUsersWithArrayInput(c *gin.Context) {
    var body vmodels.[]User
    jsonFail := c.BindJSON(&body)
    if jsonFail != nil {
        panic(jsonFail)
    }
    c.Writer.WriteHeader(http.StatusOK)
    return
}
/**
 * Creates list of users with given input array
 * 
 */
func CreateUsersWithListInput(c *gin.Context) {
    var body vmodels.[]User
    jsonFail := c.BindJSON(&body)
    if jsonFail != nil {
        panic(jsonFail)
    }
    c.Writer.WriteHeader(http.StatusOK)
    return
}
/**
 * Delete user
 * 
 */
func DeleteUser(c *gin.Context) {
    var username string=c.Param("username")
    c.Writer.WriteHeader(http.StatusOK)
    return
}
/**
 * Get user by user name
 * 
 */
func GetUserByName(c *gin.Context) {
    var username string=c.Param("username")
    c.Writer.Header().Set("Content-Type","application/json")
    c.Writer.Header().Set("Content-Type","application/xml")
    c.Writer.WriteHeader(http.StatusOK)
    var responseBody User
    res,_:=json.Marshal(responseBody)
    c.Writer.Write(res)
    return
}
/**
 * Logs user into the system
 * 
 */
func LoginUser(c *gin.Context) {
    var username string=c.Query("username")
    var password string=c.Query("password")
    c.Writer.Header().Set("Content-Type","application/json")
    c.Writer.Header().Set("Content-Type","application/xml")
    c.Writer.WriteHeader(http.StatusOK)
    var responseBody string
    res,_:=json.Marshal(responseBody)
    c.Writer.Write(res)
    return
}
/**
 * Logs out current logged in user session
 * 
 */
func LogoutUser(c *gin.Context) {
    c.Writer.WriteHeader(http.StatusOK)
    return
}
/**
 * Updated user
 * 
 */
func UpdateUser(c *gin.Context) {
    var username string=c.Param("username")
    var body vmodels.User
    jsonFail := c.BindJSON(&body)
    if jsonFail != nil {
        panic(jsonFail)
    }
    c.Writer.WriteHeader(http.StatusOK)
    return
}
