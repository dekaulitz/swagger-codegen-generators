/*
 * Swagger Generator
 *
 * This is an online swagger codegen server.  You can find out more at https://github.com/swagger-api/swagger-codegen or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * API version: 3.0.14
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package vmodels

type Options struct {
	// adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
	Auth string `json:"auth,omitempty"`

	AuthorizationValue *AuthorizationValue `json:"authorizationValue,omitempty"`
	// package for generated api classes
	ApiPackage string `json:"apiPackage,omitempty"`
	// template version for generation
	TemplateVersion string `json:"templateVersion,omitempty"`
	// package for generated models
	ModelPackage string `json:"modelPackage,omitempty"`
	// Prefix that will be prepended to all model names. Default is the empty string.
	ModelNamePrefix string `json:"modelNamePrefix,omitempty"`
	// PrefixSuffix that will be appended to all model names. Default is the empty string.
	ModelNameSuffix string `json:"modelNameSuffix,omitempty"`
	// sets specified system properties in key/value format
	SystemProperties map[string]string `json:"systemProperties,omitempty"`
	// sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
	InstantiationTypes map[string]string `json:"instantiationTypes,omitempty"`
	// sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
	TypeMappings map[string]string `json:"typeMappings,omitempty"`
	// sets additional properties that can be referenced by the mustache templates in key/value format.
	AdditionalProperties map[string]interface{} `json:"additionalProperties,omitempty"`
	// specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
	LanguageSpecificPrimitives []string `json:"languageSpecificPrimitives,omitempty"`
	// specifies mappings between a given class and the import that should be used for that class in key/value format.
	ImportMappings map[string]string `json:"importMappings,omitempty"`
	// root package for generated code
	InvokerPackage string `json:"invokerPackage,omitempty"`
	// groupId in generated pom.xml
	GroupId string `json:"groupId,omitempty"`
	// artifactId in generated pom.xml
	ArtifactId string `json:"artifactId,omitempty"`
	// artifact version generated in pom.xml
	ArtifactVersion string `json:"artifactVersion,omitempty"`
	// library template (sub-template)
	Library string `json:"library,omitempty"`
	// Git user ID, e.g. swagger-api.
	GitUserId string `json:"gitUserId,omitempty"`
	// Git repo ID, e.g. swagger-codegen.
	GitRepoId string `json:"gitRepoId,omitempty"`
	// Release note, default to 'Minor update'.
	ReleaseNote string `json:"releaseNote,omitempty"`
	// HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
	HttpUserAgent string `json:"httpUserAgent,omitempty"`
	// pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
	ReservedWordsMappings map[string]string `json:"reservedWordsMappings,omitempty"`
	// Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
	IgnoreFileOverride string `json:"ignoreFileOverride,omitempty"`
	// Remove prefix of operationId, e.g. config_getId => getId
	RemoveOperationIdPrefix bool `json:"removeOperationIdPrefix,omitempty"`

	SkipOverride bool `json:"skipOverride,omitempty"`
}
